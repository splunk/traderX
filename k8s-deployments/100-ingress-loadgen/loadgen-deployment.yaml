apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: loadgen
  name: loadgen
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: loadgen
  template:
    metadata:
      labels:
        io.kompose.service: loadgen
    spec:
      containers:
        - name: loadgen  # Container name added here
          image: quay.io/phagen/traderx/loadgen-service:0.1
          imagePullPolicy: Always
          resources:
            requests:
              memory: "75Mi"
              cpu: "100m"
            limits:
              memory: "100Mi"
              cpu: "200m"
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traderx-loadgen-deployment
  labels:
    app: traderx-loadgen
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traderx-loadgen
  template:
    metadata:
      labels:
        app: traderx-loadgen
    spec:
      # If you are NOT running this from AWS, but from multipass for example set the below env variable
      # set RUM_FRONTEND_IP to the IP address where you can reach your local Online Boutique
      #env:
      #  - name: RUM_FRONTEND_IP
      #    value: "192.168.1.99"
      containers:
        - name: traderx-loadgen
          image: rcastley895/rumloadgen:5.5
          imagePullPolicy: Always
          env:
            - name: NODE_IP
              value: 198.19.249.89
              # valueFrom:
              #  fieldRef:
              #    fieldPath: status.hostIP
            - name: RUM_PROTOCOL
              value: "http"
            - name: RUM_PORT
              value: "8080"
          volumeMounts:
            - name: puppeteer
              subPath: local-file
              mountPath: /puppeteer/touchwebsite.js
      volumes:
        - name: puppeteer
          configMap:
            name: scriptfile
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scriptfile
data:
  local-file: |
    const { Console } = require('console');
    const puppeteer = require('puppeteer'); // v22.0.0 or later
    function run () {
          return new Promise(async (resolve, reject) => {
              const browser = await puppeteer.launch({
                  headless: 'new',
                  defaultViewport: null,
                  args: ['--no-sandbox', '--disable-setuid-sandbox']
              });
              try 
              { 
                const wait_time = 10000;  //Set up delay between page interactions
                for (let loop=0; loop < 1;loop++) 
                {  // as part of the load we run multiple of this script to generate multiple session
                  const context = await browser.createBrowserContext();
                  const page = await context.newPage();
                  await page.setUserAgent('Mozilla/5.0 (X11; Linux x86_64; Splunk RUMLoadGen) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36')
                  const urls= ["http://"+ process.env.NODE_IP + ":" + process.env.RUM_PORT]; //Setting up and array for urls
                  const timeout = 30000; 
                  for (const element of urls) 
                  {   // read from array of url's
                    const url = element;
                    await targetPage.goto(`${url}:/trade`);
                    {
                      const targetPage = page;
                      await puppeteer.Locator.race([
                          targetPage.locator('::-p-aria(Big Corporate Fund )'),
                          targetPage.locator('#drpbtn0'),
                          targetPage.locator('::-p-xpath(//*[@id=\\"drpbtn0\\"])'),
                          targetPage.locator(':scope >>> #drpbtn0'),
                          targetPage.locator('::-p-text(Big Corporate)')
                      ])
                          .setTimeout(timeout)
                          .click({
                            offset: {
                              x: 136,
                              y: 11.953125,
                          },
                       });
                      const textContent = await page.evaluate(() => document.querySelector("#drpbtn0").textContent);
                      console.log('{"severity":"info","msg":"Account Selected = "' + textContent + '"}');
                    }
                    { //switch account
                      const targetPage = page;
                      await puppeteer.Locator.race([
                          targetPage.locator('::-p-aria(Internal Trading Book) >>>> ::-p-aria([role=\\"generic\\"])'),
                          targetPage.locator('app-trade li:nth-of-type(1) > a'),
                          targetPage.locator('::-p-xpath(//*[@id=\\"drp0\\"]/li[1]/a)'),
                          targetPage.locator(':scope >>> app-trade li:nth-of-type(1) > a'),
                          targetPage.locator('::-p-text(Internal Trading)')
                      ])
                          .setTimeout(timeout)
                          .click({
                            offset: {
                              x: 101,
                              y: 19.953125,
                            },
                          });
                      const textContent = await page.evaluate(() => document.querySelector("#drpbtn0").textContent);
                      console.log('{"severity":"info","msg":"Account switched to = "' + textContent + '"}');
                    }
                    {
                      const targetPage = page;
                      await puppeteer.Locator.race([
                          targetPage.locator('::-p-aria(Create Trade Ticket)'),
                          targetPage.locator('#createTicketBtn'),
                          targetPage.locator('::-p-xpath(//*[@id=\\"createTicketBtn\\"])'),
                          targetPage.locator(':scope >>> #createTicketBtn'),
                          targetPage.locator('::-p-text(Create Trade)')
                      ])
                          .setTimeout(timeout)
                          .click({
                            offset: {
                              x: 71.125,
                              y: 12.953125,
                            },
                          });
                        const textContent = await page.evaluate(() => document.querySelector("#drpbtn0").textContent);
                        console.log('{"severity":"info","msg":"Account switched to = "' + textContent + '"}');
                      }
                      /* 
                       insert into here 
                      */
                 }
                  await delay(wait_time );
                  await browser.close();
                }
                process.exit();
          } catch (e) {
            console.log ('{"severity":"error","msg": "'+ e + '"}');
          } finally {
            await browser.close();
          }
        })
    }
    run().then(console.log).catch(console.error);

    function delay(time) {
      return new Promise(function(resolve) {
          setTimeout(resolve, time)
      });
    }